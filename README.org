* Example Make Build for STM32F407vgtx

This code was generated by the STM32Cubemx program.  

It has been compiled, built and cleaned up.

* Steps to Generate
** Resources
Much thanks to Electro Nut Labs for [[http://electronut.in/stm32-returns/][This blog post]]  which outlines what software is needed.
Also Wolin labs post which outlines some of the linking and targeting steps that were missing
[[http://www.wolinlabs.com/blog/linux.stm32.discovery.gcc.html][here]]. 


** Downloads 

+ [[http://www.openstm32.org/Downloading%2Bthe%2BSystem%2BWorkbench%2Bfor%2BSTM32%2Binstaller][STM Workbench Installer]]
+ [[https://launchpad.net/gcc-arm-embedded/+download][Arm ABI tool chain: gcc-arm-none-eabi-x_x-xxxx-xxxx-linux.tar.bz2]]
+ [[http://www.st.com/en/development-tools/stm32cubemx.html][STM CUBE (requires registration)]]
+ [[https://github.com/texane/stlink][stlink]]

The STM Workbench isn't actually involved in the process but I bet it will be desired later.

** Generation Process


You will select your desired chip in the stm cube setup.
[[./docs/img/STM32CubeMX_First_View.png]]

After you do the screen above will display a sample chip.

*** Change Project Generation to Make

Next go to the project settings and change it to Make 
[[./docs/img/Project_settings_make_configuration.png]]

*** Generate the code 
Lastly select Project>GenerateCode
[[./docs/img/STM32_GenerateCodeSelection.png]]

This will generate a makefile and all the drivers that are found in this project.

You can run make now but as of <2018-02-10 Sat> The code that is generated will not compile.  
To fix this you have to clean the project.
* Steps to Clean 
** Change BINPATH
First you must change the BINPATH folder to the location of your arm gcc toolchain.
For me, this was =BINPATH = ~/toolchains/gcc-arm-none-eabi-5_4-2016q3/bin=
** Drop Duplicates
For some reason the generation process duplicates code
The following files are duplicated:

+ =Src/stm32f4xx_it.c=
+ =Src/main.c \=
+ =Src/system_stm32f4xx.c \=

I did notice that when I googled different people reported different sets of files as duplicated.

* Steps to Deploy 
Deployment for the STM32 means sending code over the st link and to the chip. 

If you are using a development board the stlink is built into the board.  Otherwise
you will need a programmer like [[https://www.mouser.com/ProductDetail/STMicroelectronics/ST-LINK-V2/?qs=H4BOwPtf9MC1sDQ8j3cy4w%3D%3D&gclid=EAIaIQobChMIjqnvyMeb2QIV27jACh1j9g88EAQYASABEgIa3_D_BwE][STLinkV2]]

** Download and build STLINK
You need to install a couple of packages before building STLINK
=sudo apt-get install autoconf pkg-config libusb-1.0 git=

Retrieve a copy of STLINK source

=cd ~=
=git clone https://github.com/texane/stlink.git=

=cd stlink=

=make release=

=make debug= only necessary for people who want to modify sources and run under a debugger

=cd build/Release=

=make install DESTDIR=_install=

As a sanity check, look under destination path: ($HOME/stlink/build/Release/_install/usr/local/bin)

You should see: st-util, st-flash, st-info, stlink-gui

** Start GDB Server
The GDB server runs in the background or in a separate terminal window and handles communication to and from the 
target device.

it is located in the stlink repo after building.  In my version it was in the folder =stlink/build/Release/src/gdbserver=

Run it with =sudo ./st-util= after building. 

** Connect with client 
In a new terminal window: ctl+alt+T

=arm-none-eabi-gdb ./build/example_make.elf=  for this project, but replace the elf with your version.

elf files are generated by the make program.

OR

=arm-none-eabi-gdb=

=(gdb) tar extended-remote :4242=  connect to localhost port 4242, where st-util is listening

=(gdb) load example_make.elf=  replace elf with your version

=(gdb) continue=


